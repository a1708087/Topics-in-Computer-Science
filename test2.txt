u8 output[64];
u32 x[16];
x[0] = ctx.input[0]; 
x[1] = ctx.input[1]; 
x[2] = ctx.input[2]; 
x[3] = ctx.input[3]; 
x[4] = ctx.input[4]; 
x[5] = ctx.input[5]; 
x[6] = ctx.input[6]; 
x[7] = ctx.input[7]; 
x[8] = ctx.input[8]; 
x[9] = ctx.input[9]; 
x[10] = ctx.input[10]; 
x[11] = ctx.input[11]; 
x[12] = ctx.input[12]; 
x[13] = ctx.input[13]; 
x[14] = ctx.input[14]; 
x[15] = ctx.input[15]; 
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
x[0] = PLUS(x[0],ctx.input[0]); 
x[1] = PLUS(x[1],ctx.input[1]); 
x[2] = PLUS(x[2],ctx.input[2]); 
x[3] = PLUS(x[3],ctx.input[3]); 
x[4] = PLUS(x[4],ctx.input[4]); 
x[5] = PLUS(x[5],ctx.input[5]); 
x[6] = PLUS(x[6],ctx.input[6]); 
x[7] = PLUS(x[7],ctx.input[7]); 
x[8] = PLUS(x[8],ctx.input[8]); 
x[9] = PLUS(x[9],ctx.input[9]); 
x[10] = PLUS(x[10],ctx.input[10]); 
x[11] = PLUS(x[11],ctx.input[11]); 
x[12] = PLUS(x[12],ctx.input[12]); 
x[13] = PLUS(x[13],ctx.input[13]); 
x[14] = PLUS(x[14],ctx.input[14]); 
x[15] = PLUS(x[15],ctx.input[15]); 
U32TO8_LITTLE(output + 4 * 0,x[0]); 
U32TO8_LITTLE(output + 4 * 1,x[1]); 
U32TO8_LITTLE(output + 4 * 2,x[2]); 
U32TO8_LITTLE(output + 4 * 3,x[3]); 
U32TO8_LITTLE(output + 4 * 4,x[4]); 
U32TO8_LITTLE(output + 4 * 5,x[5]); 
U32TO8_LITTLE(output + 4 * 6,x[6]); 
U32TO8_LITTLE(output + 4 * 7,x[7]); 
U32TO8_LITTLE(output + 4 * 8,x[8]); 
U32TO8_LITTLE(output + 4 * 9,x[9]); 
U32TO8_LITTLE(output + 4 * 10,x[10]); 
U32TO8_LITTLE(output + 4 * 11,x[11]); 
U32TO8_LITTLE(output + 4 * 12,x[12]); 
U32TO8_LITTLE(output + 4 * 13,x[13]); 
U32TO8_LITTLE(output + 4 * 14,x[14]); 
U32TO8_LITTLE(output + 4 * 15,x[15]); 
ctx.input[12] = PLUSONE(ctx.input[12]); 
if (!ctx.input[12]) { 
ctx.input[13] = PLUSONE(ctx.input[13]); 
}
result[0] = ciphertext[0] ^ output[0];
result[1] = ciphertext[1] ^ output[1];
result[2] = ciphertext[2] ^ output[2];
result[3] = ciphertext[3] ^ output[3];
result[4] = ciphertext[4] ^ output[4];
result[5] = ciphertext[5] ^ output[5];
result[6] = ciphertext[6] ^ output[6];
result[7] = ciphertext[7] ^ output[7];
result[8] = ciphertext[8] ^ output[8];
result[9] = ciphertext[9] ^ output[9];
result[10] = ciphertext[10] ^ output[10];
result[11] = ciphertext[11] ^ output[11];
result[12] = ciphertext[12] ^ output[12];
result[13] = ciphertext[13] ^ output[13];
result[14] = ciphertext[14] ^ output[14];
result[15] = ciphertext[15] ^ output[15];
result[16] = ciphertext[16] ^ output[16];
result[17] = ciphertext[17] ^ output[17];
result[18] = ciphertext[18] ^ output[18];
result[19] = ciphertext[19] ^ output[19];
result[20] = ciphertext[20] ^ output[20];
result[21] = ciphertext[21] ^ output[21];
result[22] = ciphertext[22] ^ output[22];
result[23] = ciphertext[23] ^ output[23];
result[24] = ciphertext[24] ^ output[24];
result[25] = ciphertext[25] ^ output[25];
result[26] = ciphertext[26] ^ output[26];
result[27] = ciphertext[27] ^ output[27];
result[28] = ciphertext[28] ^ output[28];
result[29] = ciphertext[29] ^ output[29];
result[30] = ciphertext[30] ^ output[30];
result[31] = ciphertext[31] ^ output[31];
result[32] = ciphertext[32] ^ output[32];
result[33] = ciphertext[33] ^ output[33];
result[34] = ciphertext[34] ^ output[34];
result[35] = ciphertext[35] ^ output[35];
result[36] = ciphertext[36] ^ output[36];
result[37] = ciphertext[37] ^ output[37];
result[38] = ciphertext[38] ^ output[38];
result[39] = ciphertext[39] ^ output[39];
result[40] = ciphertext[40] ^ output[40];
result[41] = ciphertext[41] ^ output[41];
result[42] = ciphertext[42] ^ output[42];
result[43] = ciphertext[43] ^ output[43];
result[44] = ciphertext[44] ^ output[44];
result[45] = ciphertext[45] ^ output[45];
result[46] = ciphertext[46] ^ output[46];
result[47] = ciphertext[47] ^ output[47];
result[48] = ciphertext[48] ^ output[48];
result[49] = ciphertext[49] ^ output[49];
result[50] = ciphertext[50] ^ output[50];
result[51] = ciphertext[51] ^ output[51];
result[52] = ciphertext[52] ^ output[52];
result[53] = ciphertext[53] ^ output[53];
result[54] = ciphertext[54] ^ output[54];
result[55] = ciphertext[55] ^ output[55];
result[56] = ciphertext[56] ^ output[56];
result[57] = ciphertext[57] ^ output[57];
result[58] = ciphertext[58] ^ output[58];
result[59] = ciphertext[59] ^ output[59];
result[60] = ciphertext[60] ^ output[60];
result[61] = ciphertext[61] ^ output[61];
result[62] = ciphertext[62] ^ output[62];
result[63] = ciphertext[63] ^ output[63];
x[0] = ctx.input[0]; 
x[1] = ctx.input[1]; 
x[2] = ctx.input[2]; 
x[3] = ctx.input[3]; 
x[4] = ctx.input[4]; 
x[5] = ctx.input[5]; 
x[6] = ctx.input[6]; 
x[7] = ctx.input[7]; 
x[8] = ctx.input[8]; 
x[9] = ctx.input[9]; 
x[10] = ctx.input[10]; 
x[11] = ctx.input[11]; 
x[12] = ctx.input[12]; 
x[13] = ctx.input[13]; 
x[14] = ctx.input[14]; 
x[15] = ctx.input[15]; 
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
x[0] = PLUS(x[0],ctx.input[0]); 
x[1] = PLUS(x[1],ctx.input[1]); 
x[2] = PLUS(x[2],ctx.input[2]); 
x[3] = PLUS(x[3],ctx.input[3]); 
x[4] = PLUS(x[4],ctx.input[4]); 
x[5] = PLUS(x[5],ctx.input[5]); 
x[6] = PLUS(x[6],ctx.input[6]); 
x[7] = PLUS(x[7],ctx.input[7]); 
x[8] = PLUS(x[8],ctx.input[8]); 
x[9] = PLUS(x[9],ctx.input[9]); 
x[10] = PLUS(x[10],ctx.input[10]); 
x[11] = PLUS(x[11],ctx.input[11]); 
x[12] = PLUS(x[12],ctx.input[12]); 
x[13] = PLUS(x[13],ctx.input[13]); 
x[14] = PLUS(x[14],ctx.input[14]); 
x[15] = PLUS(x[15],ctx.input[15]); 
U32TO8_LITTLE(output + 4 * 0,x[0]); 
U32TO8_LITTLE(output + 4 * 1,x[1]); 
U32TO8_LITTLE(output + 4 * 2,x[2]); 
U32TO8_LITTLE(output + 4 * 3,x[3]); 
U32TO8_LITTLE(output + 4 * 4,x[4]); 
U32TO8_LITTLE(output + 4 * 5,x[5]); 
U32TO8_LITTLE(output + 4 * 6,x[6]); 
U32TO8_LITTLE(output + 4 * 7,x[7]); 
U32TO8_LITTLE(output + 4 * 8,x[8]); 
U32TO8_LITTLE(output + 4 * 9,x[9]); 
U32TO8_LITTLE(output + 4 * 10,x[10]); 
U32TO8_LITTLE(output + 4 * 11,x[11]); 
U32TO8_LITTLE(output + 4 * 12,x[12]); 
U32TO8_LITTLE(output + 4 * 13,x[13]); 
U32TO8_LITTLE(output + 4 * 14,x[14]); 
U32TO8_LITTLE(output + 4 * 15,x[15]); 
ctx.input[12] = PLUSONE(ctx.input[12]); 
if (!ctx.input[12]) { 
ctx.input[13] = PLUSONE(ctx.input[13]); 
}
result[64] = ciphertext[64] ^ output[0];
result[65] = ciphertext[65] ^ output[1];
result[66] = ciphertext[66] ^ output[2];
result[67] = ciphertext[67] ^ output[3];
result[68] = ciphertext[68] ^ output[4];
result[69] = ciphertext[69] ^ output[5];
result[70] = ciphertext[70] ^ output[6];
result[71] = ciphertext[71] ^ output[7];
result[72] = ciphertext[72] ^ output[8];
result[73] = ciphertext[73] ^ output[9];
result[74] = ciphertext[74] ^ output[10];
result[75] = ciphertext[75] ^ output[11];
result[76] = ciphertext[76] ^ output[12];
result[77] = ciphertext[77] ^ output[13];
result[78] = ciphertext[78] ^ output[14];
result[79] = ciphertext[79] ^ output[15];
result[80] = ciphertext[80] ^ output[16];
result[81] = ciphertext[81] ^ output[17];
result[82] = ciphertext[82] ^ output[18];
result[83] = ciphertext[83] ^ output[19];
result[84] = ciphertext[84] ^ output[20];
result[85] = ciphertext[85] ^ output[21];
result[86] = ciphertext[86] ^ output[22];
result[87] = ciphertext[87] ^ output[23];
result[88] = ciphertext[88] ^ output[24];
result[89] = ciphertext[89] ^ output[25];
result[90] = ciphertext[90] ^ output[26];
result[91] = ciphertext[91] ^ output[27];
result[92] = ciphertext[92] ^ output[28];
result[93] = ciphertext[93] ^ output[29];
result[94] = ciphertext[94] ^ output[30];
result[95] = ciphertext[95] ^ output[31];
result[96] = ciphertext[96] ^ output[32];
result[97] = ciphertext[97] ^ output[33];
result[98] = ciphertext[98] ^ output[34];
result[99] = ciphertext[99] ^ output[35];
result[100] = ciphertext[100] ^ output[36];
result[101] = ciphertext[101] ^ output[37];
result[102] = ciphertext[102] ^ output[38];
result[103] = ciphertext[103] ^ output[39];
result[104] = ciphertext[104] ^ output[40];
result[105] = ciphertext[105] ^ output[41];
result[106] = ciphertext[106] ^ output[42];
result[107] = ciphertext[107] ^ output[43];
result[108] = ciphertext[108] ^ output[44];
result[109] = ciphertext[109] ^ output[45];
result[110] = ciphertext[110] ^ output[46];
result[111] = ciphertext[111] ^ output[47];
result[112] = ciphertext[112] ^ output[48];
result[113] = ciphertext[113] ^ output[49];
result[114] = ciphertext[114] ^ output[50];
result[115] = ciphertext[115] ^ output[51];
result[116] = ciphertext[116] ^ output[52];
result[117] = ciphertext[117] ^ output[53];
result[118] = ciphertext[118] ^ output[54];
result[119] = ciphertext[119] ^ output[55];
result[120] = ciphertext[120] ^ output[56];
result[121] = ciphertext[121] ^ output[57];
result[122] = ciphertext[122] ^ output[58];
result[123] = ciphertext[123] ^ output[59];
result[124] = ciphertext[124] ^ output[60];
result[125] = ciphertext[125] ^ output[61];
result[126] = ciphertext[126] ^ output[62];
result[127] = ciphertext[127] ^ output[63];
x[0] = ctx.input[0]; 
x[1] = ctx.input[1]; 
x[2] = ctx.input[2]; 
x[3] = ctx.input[3]; 
x[4] = ctx.input[4]; 
x[5] = ctx.input[5]; 
x[6] = ctx.input[6]; 
x[7] = ctx.input[7]; 
x[8] = ctx.input[8]; 
x[9] = ctx.input[9]; 
x[10] = ctx.input[10]; 
x[11] = ctx.input[11]; 
x[12] = ctx.input[12]; 
x[13] = ctx.input[13]; 
x[14] = ctx.input[14]; 
x[15] = ctx.input[15]; 
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
x[0] = PLUS(x[0],ctx.input[0]); 
x[1] = PLUS(x[1],ctx.input[1]); 
x[2] = PLUS(x[2],ctx.input[2]); 
x[3] = PLUS(x[3],ctx.input[3]); 
x[4] = PLUS(x[4],ctx.input[4]); 
x[5] = PLUS(x[5],ctx.input[5]); 
x[6] = PLUS(x[6],ctx.input[6]); 
x[7] = PLUS(x[7],ctx.input[7]); 
x[8] = PLUS(x[8],ctx.input[8]); 
x[9] = PLUS(x[9],ctx.input[9]); 
x[10] = PLUS(x[10],ctx.input[10]); 
x[11] = PLUS(x[11],ctx.input[11]); 
x[12] = PLUS(x[12],ctx.input[12]); 
x[13] = PLUS(x[13],ctx.input[13]); 
x[14] = PLUS(x[14],ctx.input[14]); 
x[15] = PLUS(x[15],ctx.input[15]); 
U32TO8_LITTLE(output + 4 * 0,x[0]); 
U32TO8_LITTLE(output + 4 * 1,x[1]); 
U32TO8_LITTLE(output + 4 * 2,x[2]); 
U32TO8_LITTLE(output + 4 * 3,x[3]); 
U32TO8_LITTLE(output + 4 * 4,x[4]); 
U32TO8_LITTLE(output + 4 * 5,x[5]); 
U32TO8_LITTLE(output + 4 * 6,x[6]); 
U32TO8_LITTLE(output + 4 * 7,x[7]); 
U32TO8_LITTLE(output + 4 * 8,x[8]); 
U32TO8_LITTLE(output + 4 * 9,x[9]); 
U32TO8_LITTLE(output + 4 * 10,x[10]); 
U32TO8_LITTLE(output + 4 * 11,x[11]); 
U32TO8_LITTLE(output + 4 * 12,x[12]); 
U32TO8_LITTLE(output + 4 * 13,x[13]); 
U32TO8_LITTLE(output + 4 * 14,x[14]); 
U32TO8_LITTLE(output + 4 * 15,x[15]); 
ctx.input[12] = PLUSONE(ctx.input[12]); 
if (!ctx.input[12]) { 
ctx.input[13] = PLUSONE(ctx.input[13]); 
}
result[128] = ciphertext[128] ^ output[0];
result[129] = ciphertext[129] ^ output[1];
result[130] = ciphertext[130] ^ output[2];
result[131] = ciphertext[131] ^ output[3];
result[132] = ciphertext[132] ^ output[4];
result[133] = ciphertext[133] ^ output[5];
result[134] = ciphertext[134] ^ output[6];
result[135] = ciphertext[135] ^ output[7];
result[136] = ciphertext[136] ^ output[8];
result[137] = ciphertext[137] ^ output[9];
result[138] = ciphertext[138] ^ output[10];
result[139] = ciphertext[139] ^ output[11];
result[140] = ciphertext[140] ^ output[12];
result[141] = ciphertext[141] ^ output[13];
result[142] = ciphertext[142] ^ output[14];
result[143] = ciphertext[143] ^ output[15];
result[144] = ciphertext[144] ^ output[16];
result[145] = ciphertext[145] ^ output[17];
result[146] = ciphertext[146] ^ output[18];
result[147] = ciphertext[147] ^ output[19];
result[148] = ciphertext[148] ^ output[20];
result[149] = ciphertext[149] ^ output[21];
result[150] = ciphertext[150] ^ output[22];
result[151] = ciphertext[151] ^ output[23];
result[152] = ciphertext[152] ^ output[24];
result[153] = ciphertext[153] ^ output[25];
result[154] = ciphertext[154] ^ output[26];
result[155] = ciphertext[155] ^ output[27];
result[156] = ciphertext[156] ^ output[28];
result[157] = ciphertext[157] ^ output[29];
result[158] = ciphertext[158] ^ output[30];
result[159] = ciphertext[159] ^ output[31];
result[160] = ciphertext[160] ^ output[32];
result[161] = ciphertext[161] ^ output[33];
result[162] = ciphertext[162] ^ output[34];
result[163] = ciphertext[163] ^ output[35];
result[164] = ciphertext[164] ^ output[36];
result[165] = ciphertext[165] ^ output[37];
result[166] = ciphertext[166] ^ output[38];
result[167] = ciphertext[167] ^ output[39];
result[168] = ciphertext[168] ^ output[40];
result[169] = ciphertext[169] ^ output[41];
result[170] = ciphertext[170] ^ output[42];
result[171] = ciphertext[171] ^ output[43];
result[172] = ciphertext[172] ^ output[44];
result[173] = ciphertext[173] ^ output[45];
result[174] = ciphertext[174] ^ output[46];
result[175] = ciphertext[175] ^ output[47];
result[176] = ciphertext[176] ^ output[48];
result[177] = ciphertext[177] ^ output[49];
result[178] = ciphertext[178] ^ output[50];
result[179] = ciphertext[179] ^ output[51];
result[180] = ciphertext[180] ^ output[52];
result[181] = ciphertext[181] ^ output[53];
result[182] = ciphertext[182] ^ output[54];
result[183] = ciphertext[183] ^ output[55];
result[184] = ciphertext[184] ^ output[56];
result[185] = ciphertext[185] ^ output[57];
result[186] = ciphertext[186] ^ output[58];
result[187] = ciphertext[187] ^ output[59];
result[188] = ciphertext[188] ^ output[60];
result[189] = ciphertext[189] ^ output[61];
result[190] = ciphertext[190] ^ output[62];
result[191] = ciphertext[191] ^ output[63];
x[0] = ctx.input[0]; 
x[1] = ctx.input[1]; 
x[2] = ctx.input[2]; 
x[3] = ctx.input[3]; 
x[4] = ctx.input[4]; 
x[5] = ctx.input[5]; 
x[6] = ctx.input[6]; 
x[7] = ctx.input[7]; 
x[8] = ctx.input[8]; 
x[9] = ctx.input[9]; 
x[10] = ctx.input[10]; 
x[11] = ctx.input[11]; 
x[12] = ctx.input[12]; 
x[13] = ctx.input[13]; 
x[14] = ctx.input[14]; 
x[15] = ctx.input[15]; 
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
x[0] = PLUS(x[0],ctx.input[0]); 
x[1] = PLUS(x[1],ctx.input[1]); 
x[2] = PLUS(x[2],ctx.input[2]); 
x[3] = PLUS(x[3],ctx.input[3]); 
x[4] = PLUS(x[4],ctx.input[4]); 
x[5] = PLUS(x[5],ctx.input[5]); 
x[6] = PLUS(x[6],ctx.input[6]); 
x[7] = PLUS(x[7],ctx.input[7]); 
x[8] = PLUS(x[8],ctx.input[8]); 
x[9] = PLUS(x[9],ctx.input[9]); 
x[10] = PLUS(x[10],ctx.input[10]); 
x[11] = PLUS(x[11],ctx.input[11]); 
x[12] = PLUS(x[12],ctx.input[12]); 
x[13] = PLUS(x[13],ctx.input[13]); 
x[14] = PLUS(x[14],ctx.input[14]); 
x[15] = PLUS(x[15],ctx.input[15]); 
U32TO8_LITTLE(output + 4 * 0,x[0]); 
U32TO8_LITTLE(output + 4 * 1,x[1]); 
U32TO8_LITTLE(output + 4 * 2,x[2]); 
U32TO8_LITTLE(output + 4 * 3,x[3]); 
U32TO8_LITTLE(output + 4 * 4,x[4]); 
U32TO8_LITTLE(output + 4 * 5,x[5]); 
U32TO8_LITTLE(output + 4 * 6,x[6]); 
U32TO8_LITTLE(output + 4 * 7,x[7]); 
U32TO8_LITTLE(output + 4 * 8,x[8]); 
U32TO8_LITTLE(output + 4 * 9,x[9]); 
U32TO8_LITTLE(output + 4 * 10,x[10]); 
U32TO8_LITTLE(output + 4 * 11,x[11]); 
U32TO8_LITTLE(output + 4 * 12,x[12]); 
U32TO8_LITTLE(output + 4 * 13,x[13]); 
U32TO8_LITTLE(output + 4 * 14,x[14]); 
U32TO8_LITTLE(output + 4 * 15,x[15]); 
ctx.input[12] = PLUSONE(ctx.input[12]); 
if (!ctx.input[12]) { 
ctx.input[13] = PLUSONE(ctx.input[13]); 
}
result[192] = ciphertext[192] ^ output[0];
result[193] = ciphertext[193] ^ output[1];
result[194] = ciphertext[194] ^ output[2];
result[195] = ciphertext[195] ^ output[3];
result[196] = ciphertext[196] ^ output[4];
result[197] = ciphertext[197] ^ output[5];
result[198] = ciphertext[198] ^ output[6];
result[199] = ciphertext[199] ^ output[7];
result[200] = ciphertext[200] ^ output[8];
result[201] = ciphertext[201] ^ output[9];
result[202] = ciphertext[202] ^ output[10];
result[203] = ciphertext[203] ^ output[11];
result[204] = ciphertext[204] ^ output[12];
result[205] = ciphertext[205] ^ output[13];
result[206] = ciphertext[206] ^ output[14];
result[207] = ciphertext[207] ^ output[15];
result[208] = ciphertext[208] ^ output[16];
result[209] = ciphertext[209] ^ output[17];
result[210] = ciphertext[210] ^ output[18];
result[211] = ciphertext[211] ^ output[19];
result[212] = ciphertext[212] ^ output[20];
result[213] = ciphertext[213] ^ output[21];
result[214] = ciphertext[214] ^ output[22];
result[215] = ciphertext[215] ^ output[23];
result[216] = ciphertext[216] ^ output[24];
result[217] = ciphertext[217] ^ output[25];
result[218] = ciphertext[218] ^ output[26];
result[219] = ciphertext[219] ^ output[27];
result[220] = ciphertext[220] ^ output[28];
result[221] = ciphertext[221] ^ output[29];
result[222] = ciphertext[222] ^ output[30];
result[223] = ciphertext[223] ^ output[31];
result[224] = ciphertext[224] ^ output[32];
result[225] = ciphertext[225] ^ output[33];
result[226] = ciphertext[226] ^ output[34];
result[227] = ciphertext[227] ^ output[35];
result[228] = ciphertext[228] ^ output[36];
result[229] = ciphertext[229] ^ output[37];
result[230] = ciphertext[230] ^ output[38];
result[231] = ciphertext[231] ^ output[39];
result[232] = ciphertext[232] ^ output[40];
result[233] = ciphertext[233] ^ output[41];
result[234] = ciphertext[234] ^ output[42];
result[235] = ciphertext[235] ^ output[43];
result[236] = ciphertext[236] ^ output[44];
result[237] = ciphertext[237] ^ output[45];
result[238] = ciphertext[238] ^ output[46];
result[239] = ciphertext[239] ^ output[47];
result[240] = ciphertext[240] ^ output[48];
result[241] = ciphertext[241] ^ output[49];
result[242] = ciphertext[242] ^ output[50];
result[243] = ciphertext[243] ^ output[51];
result[244] = ciphertext[244] ^ output[52];
result[245] = ciphertext[245] ^ output[53];
result[246] = ciphertext[246] ^ output[54];
result[247] = ciphertext[247] ^ output[55];
result[248] = ciphertext[248] ^ output[56];
result[249] = ciphertext[249] ^ output[57];
result[250] = ciphertext[250] ^ output[58];
result[251] = ciphertext[251] ^ output[59];
result[252] = ciphertext[252] ^ output[60];
result[253] = ciphertext[253] ^ output[61];
result[254] = ciphertext[254] ^ output[62];
result[255] = ciphertext[255] ^ output[63];
x[0] = ctx.input[0]; 
x[1] = ctx.input[1]; 
x[2] = ctx.input[2]; 
x[3] = ctx.input[3]; 
x[4] = ctx.input[4]; 
x[5] = ctx.input[5]; 
x[6] = ctx.input[6]; 
x[7] = ctx.input[7]; 
x[8] = ctx.input[8]; 
x[9] = ctx.input[9]; 
x[10] = ctx.input[10]; 
x[11] = ctx.input[11]; 
x[12] = ctx.input[12]; 
x[13] = ctx.input[13]; 
x[14] = ctx.input[14]; 
x[15] = ctx.input[15]; 
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
x[0] = PLUS(x[0],ctx.input[0]); 
x[1] = PLUS(x[1],ctx.input[1]); 
x[2] = PLUS(x[2],ctx.input[2]); 
x[3] = PLUS(x[3],ctx.input[3]); 
x[4] = PLUS(x[4],ctx.input[4]); 
x[5] = PLUS(x[5],ctx.input[5]); 
x[6] = PLUS(x[6],ctx.input[6]); 
x[7] = PLUS(x[7],ctx.input[7]); 
x[8] = PLUS(x[8],ctx.input[8]); 
x[9] = PLUS(x[9],ctx.input[9]); 
x[10] = PLUS(x[10],ctx.input[10]); 
x[11] = PLUS(x[11],ctx.input[11]); 
x[12] = PLUS(x[12],ctx.input[12]); 
x[13] = PLUS(x[13],ctx.input[13]); 
x[14] = PLUS(x[14],ctx.input[14]); 
x[15] = PLUS(x[15],ctx.input[15]); 
U32TO8_LITTLE(output + 4 * 0,x[0]); 
U32TO8_LITTLE(output + 4 * 1,x[1]); 
U32TO8_LITTLE(output + 4 * 2,x[2]); 
U32TO8_LITTLE(output + 4 * 3,x[3]); 
U32TO8_LITTLE(output + 4 * 4,x[4]); 
U32TO8_LITTLE(output + 4 * 5,x[5]); 
U32TO8_LITTLE(output + 4 * 6,x[6]); 
U32TO8_LITTLE(output + 4 * 7,x[7]); 
U32TO8_LITTLE(output + 4 * 8,x[8]); 
U32TO8_LITTLE(output + 4 * 9,x[9]); 
U32TO8_LITTLE(output + 4 * 10,x[10]); 
U32TO8_LITTLE(output + 4 * 11,x[11]); 
U32TO8_LITTLE(output + 4 * 12,x[12]); 
U32TO8_LITTLE(output + 4 * 13,x[13]); 
U32TO8_LITTLE(output + 4 * 14,x[14]); 
U32TO8_LITTLE(output + 4 * 15,x[15]); 
ctx.input[12] = PLUSONE(ctx.input[12]); 
if (!ctx.input[12]) { 
ctx.input[13] = PLUSONE(ctx.input[13]); 
}
result[256] = ciphertext[256] ^ output[0];
result[257] = ciphertext[257] ^ output[1];
result[258] = ciphertext[258] ^ output[2];
result[259] = ciphertext[259] ^ output[3];
result[260] = ciphertext[260] ^ output[4];
result[261] = ciphertext[261] ^ output[5];
result[262] = ciphertext[262] ^ output[6];
result[263] = ciphertext[263] ^ output[7];
result[264] = ciphertext[264] ^ output[8];
result[265] = ciphertext[265] ^ output[9];
result[266] = ciphertext[266] ^ output[10];
result[267] = ciphertext[267] ^ output[11];
result[268] = ciphertext[268] ^ output[12];
result[269] = ciphertext[269] ^ output[13];
result[270] = ciphertext[270] ^ output[14];
result[271] = ciphertext[271] ^ output[15];
result[272] = ciphertext[272] ^ output[16];
result[273] = ciphertext[273] ^ output[17];
result[274] = ciphertext[274] ^ output[18];
result[275] = ciphertext[275] ^ output[19];
result[276] = ciphertext[276] ^ output[20];
result[277] = ciphertext[277] ^ output[21];
result[278] = ciphertext[278] ^ output[22];
result[279] = ciphertext[279] ^ output[23];
result[280] = ciphertext[280] ^ output[24];
result[281] = ciphertext[281] ^ output[25];
result[282] = ciphertext[282] ^ output[26];
result[283] = ciphertext[283] ^ output[27];
result[284] = ciphertext[284] ^ output[28];
result[285] = ciphertext[285] ^ output[29];
result[286] = ciphertext[286] ^ output[30];
result[287] = ciphertext[287] ^ output[31];
result[288] = ciphertext[288] ^ output[32];
result[289] = ciphertext[289] ^ output[33];
result[290] = ciphertext[290] ^ output[34];
result[291] = ciphertext[291] ^ output[35];
result[292] = ciphertext[292] ^ output[36];
result[293] = ciphertext[293] ^ output[37];
result[294] = ciphertext[294] ^ output[38];
result[295] = ciphertext[295] ^ output[39];
result[296] = ciphertext[296] ^ output[40];
result[297] = ciphertext[297] ^ output[41];
result[298] = ciphertext[298] ^ output[42];
result[299] = ciphertext[299] ^ output[43];
result[300] = ciphertext[300] ^ output[44];
result[301] = ciphertext[301] ^ output[45];
result[302] = ciphertext[302] ^ output[46];
result[303] = ciphertext[303] ^ output[47];
result[304] = ciphertext[304] ^ output[48];
result[305] = ciphertext[305] ^ output[49];
result[306] = ciphertext[306] ^ output[50];
result[307] = ciphertext[307] ^ output[51];
result[308] = ciphertext[308] ^ output[52];
result[309] = ciphertext[309] ^ output[53];
result[310] = ciphertext[310] ^ output[54];
result[311] = ciphertext[311] ^ output[55];
result[312] = ciphertext[312] ^ output[56];
result[313] = ciphertext[313] ^ output[57];
result[314] = ciphertext[314] ^ output[58];
result[315] = ciphertext[315] ^ output[59];
result[316] = ciphertext[316] ^ output[60];
result[317] = ciphertext[317] ^ output[61];
result[318] = ciphertext[318] ^ output[62];
result[319] = ciphertext[319] ^ output[63];
x[0] = ctx.input[0]; 
x[1] = ctx.input[1]; 
x[2] = ctx.input[2]; 
x[3] = ctx.input[3]; 
x[4] = ctx.input[4]; 
x[5] = ctx.input[5]; 
x[6] = ctx.input[6]; 
x[7] = ctx.input[7]; 
x[8] = ctx.input[8]; 
x[9] = ctx.input[9]; 
x[10] = ctx.input[10]; 
x[11] = ctx.input[11]; 
x[12] = ctx.input[12]; 
x[13] = ctx.input[13]; 
x[14] = ctx.input[14]; 
x[15] = ctx.input[15]; 
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
x[0] = PLUS(x[0],ctx.input[0]); 
x[1] = PLUS(x[1],ctx.input[1]); 
x[2] = PLUS(x[2],ctx.input[2]); 
x[3] = PLUS(x[3],ctx.input[3]); 
x[4] = PLUS(x[4],ctx.input[4]); 
x[5] = PLUS(x[5],ctx.input[5]); 
x[6] = PLUS(x[6],ctx.input[6]); 
x[7] = PLUS(x[7],ctx.input[7]); 
x[8] = PLUS(x[8],ctx.input[8]); 
x[9] = PLUS(x[9],ctx.input[9]); 
x[10] = PLUS(x[10],ctx.input[10]); 
x[11] = PLUS(x[11],ctx.input[11]); 
x[12] = PLUS(x[12],ctx.input[12]); 
x[13] = PLUS(x[13],ctx.input[13]); 
x[14] = PLUS(x[14],ctx.input[14]); 
x[15] = PLUS(x[15],ctx.input[15]); 
U32TO8_LITTLE(output + 4 * 0,x[0]); 
U32TO8_LITTLE(output + 4 * 1,x[1]); 
U32TO8_LITTLE(output + 4 * 2,x[2]); 
U32TO8_LITTLE(output + 4 * 3,x[3]); 
U32TO8_LITTLE(output + 4 * 4,x[4]); 
U32TO8_LITTLE(output + 4 * 5,x[5]); 
U32TO8_LITTLE(output + 4 * 6,x[6]); 
U32TO8_LITTLE(output + 4 * 7,x[7]); 
U32TO8_LITTLE(output + 4 * 8,x[8]); 
U32TO8_LITTLE(output + 4 * 9,x[9]); 
U32TO8_LITTLE(output + 4 * 10,x[10]); 
U32TO8_LITTLE(output + 4 * 11,x[11]); 
U32TO8_LITTLE(output + 4 * 12,x[12]); 
U32TO8_LITTLE(output + 4 * 13,x[13]); 
U32TO8_LITTLE(output + 4 * 14,x[14]); 
U32TO8_LITTLE(output + 4 * 15,x[15]); 
ctx.input[12] = PLUSONE(ctx.input[12]); 
if (!ctx.input[12]) { 
ctx.input[13] = PLUSONE(ctx.input[13]); 
}
result[320] = ciphertext[320] ^ output[0];
result[321] = ciphertext[321] ^ output[1];
result[322] = ciphertext[322] ^ output[2];
result[323] = ciphertext[323] ^ output[3];
result[324] = ciphertext[324] ^ output[4];
result[325] = ciphertext[325] ^ output[5];
result[326] = ciphertext[326] ^ output[6];
result[327] = ciphertext[327] ^ output[7];
result[328] = ciphertext[328] ^ output[8];
result[329] = ciphertext[329] ^ output[9];
result[330] = ciphertext[330] ^ output[10];
result[331] = ciphertext[331] ^ output[11];
result[332] = ciphertext[332] ^ output[12];
result[333] = ciphertext[333] ^ output[13];
result[334] = ciphertext[334] ^ output[14];
result[335] = ciphertext[335] ^ output[15];
result[336] = ciphertext[336] ^ output[16];
result[337] = ciphertext[337] ^ output[17];
result[338] = ciphertext[338] ^ output[18];
result[339] = ciphertext[339] ^ output[19];
result[340] = ciphertext[340] ^ output[20];
result[341] = ciphertext[341] ^ output[21];
result[342] = ciphertext[342] ^ output[22];
result[343] = ciphertext[343] ^ output[23];
result[344] = ciphertext[344] ^ output[24];
result[345] = ciphertext[345] ^ output[25];
result[346] = ciphertext[346] ^ output[26];
result[347] = ciphertext[347] ^ output[27];
result[348] = ciphertext[348] ^ output[28];
result[349] = ciphertext[349] ^ output[29];
result[350] = ciphertext[350] ^ output[30];
result[351] = ciphertext[351] ^ output[31];
result[352] = ciphertext[352] ^ output[32];
result[353] = ciphertext[353] ^ output[33];
result[354] = ciphertext[354] ^ output[34];
result[355] = ciphertext[355] ^ output[35];
result[356] = ciphertext[356] ^ output[36];
result[357] = ciphertext[357] ^ output[37];
result[358] = ciphertext[358] ^ output[38];
result[359] = ciphertext[359] ^ output[39];
result[360] = ciphertext[360] ^ output[40];
result[361] = ciphertext[361] ^ output[41];
result[362] = ciphertext[362] ^ output[42];
result[363] = ciphertext[363] ^ output[43];
result[364] = ciphertext[364] ^ output[44];
result[365] = ciphertext[365] ^ output[45];
result[366] = ciphertext[366] ^ output[46];
result[367] = ciphertext[367] ^ output[47];
result[368] = ciphertext[368] ^ output[48];
result[369] = ciphertext[369] ^ output[49];
result[370] = ciphertext[370] ^ output[50];
result[371] = ciphertext[371] ^ output[51];
result[372] = ciphertext[372] ^ output[52];
result[373] = ciphertext[373] ^ output[53];
result[374] = ciphertext[374] ^ output[54];
result[375] = ciphertext[375] ^ output[55];
result[376] = ciphertext[376] ^ output[56];
result[377] = ciphertext[377] ^ output[57];
result[378] = ciphertext[378] ^ output[58];
result[379] = ciphertext[379] ^ output[59];
result[380] = ciphertext[380] ^ output[60];
result[381] = ciphertext[381] ^ output[61];
result[382] = ciphertext[382] ^ output[62];
result[383] = ciphertext[383] ^ output[63];
x[0] = ctx.input[0]; 
x[1] = ctx.input[1]; 
x[2] = ctx.input[2]; 
x[3] = ctx.input[3]; 
x[4] = ctx.input[4]; 
x[5] = ctx.input[5]; 
x[6] = ctx.input[6]; 
x[7] = ctx.input[7]; 
x[8] = ctx.input[8]; 
x[9] = ctx.input[9]; 
x[10] = ctx.input[10]; 
x[11] = ctx.input[11]; 
x[12] = ctx.input[12]; 
x[13] = ctx.input[13]; 
x[14] = ctx.input[14]; 
x[15] = ctx.input[15]; 
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
x[0] = PLUS(x[0],ctx.input[0]); 
x[1] = PLUS(x[1],ctx.input[1]); 
x[2] = PLUS(x[2],ctx.input[2]); 
x[3] = PLUS(x[3],ctx.input[3]); 
x[4] = PLUS(x[4],ctx.input[4]); 
x[5] = PLUS(x[5],ctx.input[5]); 
x[6] = PLUS(x[6],ctx.input[6]); 
x[7] = PLUS(x[7],ctx.input[7]); 
x[8] = PLUS(x[8],ctx.input[8]); 
x[9] = PLUS(x[9],ctx.input[9]); 
x[10] = PLUS(x[10],ctx.input[10]); 
x[11] = PLUS(x[11],ctx.input[11]); 
x[12] = PLUS(x[12],ctx.input[12]); 
x[13] = PLUS(x[13],ctx.input[13]); 
x[14] = PLUS(x[14],ctx.input[14]); 
x[15] = PLUS(x[15],ctx.input[15]); 
U32TO8_LITTLE(output + 4 * 0,x[0]); 
U32TO8_LITTLE(output + 4 * 1,x[1]); 
U32TO8_LITTLE(output + 4 * 2,x[2]); 
U32TO8_LITTLE(output + 4 * 3,x[3]); 
U32TO8_LITTLE(output + 4 * 4,x[4]); 
U32TO8_LITTLE(output + 4 * 5,x[5]); 
U32TO8_LITTLE(output + 4 * 6,x[6]); 
U32TO8_LITTLE(output + 4 * 7,x[7]); 
U32TO8_LITTLE(output + 4 * 8,x[8]); 
U32TO8_LITTLE(output + 4 * 9,x[9]); 
U32TO8_LITTLE(output + 4 * 10,x[10]); 
U32TO8_LITTLE(output + 4 * 11,x[11]); 
U32TO8_LITTLE(output + 4 * 12,x[12]); 
U32TO8_LITTLE(output + 4 * 13,x[13]); 
U32TO8_LITTLE(output + 4 * 14,x[14]); 
U32TO8_LITTLE(output + 4 * 15,x[15]); 
ctx.input[12] = PLUSONE(ctx.input[12]); 
if (!ctx.input[12]) { 
ctx.input[13] = PLUSONE(ctx.input[13]); 
}
result[384] = ciphertext[384] ^ output[0];
result[385] = ciphertext[385] ^ output[1];
result[386] = ciphertext[386] ^ output[2];
result[387] = ciphertext[387] ^ output[3];
result[388] = ciphertext[388] ^ output[4];
result[389] = ciphertext[389] ^ output[5];
result[390] = ciphertext[390] ^ output[6];
result[391] = ciphertext[391] ^ output[7];
result[392] = ciphertext[392] ^ output[8];
result[393] = ciphertext[393] ^ output[9];
result[394] = ciphertext[394] ^ output[10];
result[395] = ciphertext[395] ^ output[11];
result[396] = ciphertext[396] ^ output[12];
result[397] = ciphertext[397] ^ output[13];
result[398] = ciphertext[398] ^ output[14];
result[399] = ciphertext[399] ^ output[15];
result[400] = ciphertext[400] ^ output[16];
result[401] = ciphertext[401] ^ output[17];
result[402] = ciphertext[402] ^ output[18];
result[403] = ciphertext[403] ^ output[19];
result[404] = ciphertext[404] ^ output[20];
result[405] = ciphertext[405] ^ output[21];
result[406] = ciphertext[406] ^ output[22];
result[407] = ciphertext[407] ^ output[23];
result[408] = ciphertext[408] ^ output[24];
result[409] = ciphertext[409] ^ output[25];
result[410] = ciphertext[410] ^ output[26];
result[411] = ciphertext[411] ^ output[27];
result[412] = ciphertext[412] ^ output[28];
result[413] = ciphertext[413] ^ output[29];
result[414] = ciphertext[414] ^ output[30];
result[415] = ciphertext[415] ^ output[31];
result[416] = ciphertext[416] ^ output[32];
result[417] = ciphertext[417] ^ output[33];
result[418] = ciphertext[418] ^ output[34];
result[419] = ciphertext[419] ^ output[35];
result[420] = ciphertext[420] ^ output[36];
result[421] = ciphertext[421] ^ output[37];
result[422] = ciphertext[422] ^ output[38];
result[423] = ciphertext[423] ^ output[39];
result[424] = ciphertext[424] ^ output[40];
result[425] = ciphertext[425] ^ output[41];
result[426] = ciphertext[426] ^ output[42];
result[427] = ciphertext[427] ^ output[43];
result[428] = ciphertext[428] ^ output[44];
result[429] = ciphertext[429] ^ output[45];
result[430] = ciphertext[430] ^ output[46];
result[431] = ciphertext[431] ^ output[47];
result[432] = ciphertext[432] ^ output[48];
result[433] = ciphertext[433] ^ output[49];
result[434] = ciphertext[434] ^ output[50];
result[435] = ciphertext[435] ^ output[51];
result[436] = ciphertext[436] ^ output[52];
result[437] = ciphertext[437] ^ output[53];
result[438] = ciphertext[438] ^ output[54];
result[439] = ciphertext[439] ^ output[55];
result[440] = ciphertext[440] ^ output[56];
result[441] = ciphertext[441] ^ output[57];
result[442] = ciphertext[442] ^ output[58];
result[443] = ciphertext[443] ^ output[59];
result[444] = ciphertext[444] ^ output[60];
result[445] = ciphertext[445] ^ output[61];
result[446] = ciphertext[446] ^ output[62];
result[447] = ciphertext[447] ^ output[63];
x[0] = ctx.input[0]; 
x[1] = ctx.input[1]; 
x[2] = ctx.input[2]; 
x[3] = ctx.input[3]; 
x[4] = ctx.input[4]; 
x[5] = ctx.input[5]; 
x[6] = ctx.input[6]; 
x[7] = ctx.input[7]; 
x[8] = ctx.input[8]; 
x[9] = ctx.input[9]; 
x[10] = ctx.input[10]; 
x[11] = ctx.input[11]; 
x[12] = ctx.input[12]; 
x[13] = ctx.input[13]; 
x[14] = ctx.input[14]; 
x[15] = ctx.input[15]; 
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
x[0] = PLUS(x[0],ctx.input[0]); 
x[1] = PLUS(x[1],ctx.input[1]); 
x[2] = PLUS(x[2],ctx.input[2]); 
x[3] = PLUS(x[3],ctx.input[3]); 
x[4] = PLUS(x[4],ctx.input[4]); 
x[5] = PLUS(x[5],ctx.input[5]); 
x[6] = PLUS(x[6],ctx.input[6]); 
x[7] = PLUS(x[7],ctx.input[7]); 
x[8] = PLUS(x[8],ctx.input[8]); 
x[9] = PLUS(x[9],ctx.input[9]); 
x[10] = PLUS(x[10],ctx.input[10]); 
x[11] = PLUS(x[11],ctx.input[11]); 
x[12] = PLUS(x[12],ctx.input[12]); 
x[13] = PLUS(x[13],ctx.input[13]); 
x[14] = PLUS(x[14],ctx.input[14]); 
x[15] = PLUS(x[15],ctx.input[15]); 
U32TO8_LITTLE(output + 4 * 0,x[0]); 
U32TO8_LITTLE(output + 4 * 1,x[1]); 
U32TO8_LITTLE(output + 4 * 2,x[2]); 
U32TO8_LITTLE(output + 4 * 3,x[3]); 
U32TO8_LITTLE(output + 4 * 4,x[4]); 
U32TO8_LITTLE(output + 4 * 5,x[5]); 
U32TO8_LITTLE(output + 4 * 6,x[6]); 
U32TO8_LITTLE(output + 4 * 7,x[7]); 
U32TO8_LITTLE(output + 4 * 8,x[8]); 
U32TO8_LITTLE(output + 4 * 9,x[9]); 
U32TO8_LITTLE(output + 4 * 10,x[10]); 
U32TO8_LITTLE(output + 4 * 11,x[11]); 
U32TO8_LITTLE(output + 4 * 12,x[12]); 
U32TO8_LITTLE(output + 4 * 13,x[13]); 
U32TO8_LITTLE(output + 4 * 14,x[14]); 
U32TO8_LITTLE(output + 4 * 15,x[15]); 
ctx.input[12] = PLUSONE(ctx.input[12]); 
if (!ctx.input[12]) { 
ctx.input[13] = PLUSONE(ctx.input[13]); 
}
result[448] = ciphertext[448] ^ output[0];
result[449] = ciphertext[449] ^ output[1];
result[450] = ciphertext[450] ^ output[2];
result[451] = ciphertext[451] ^ output[3];
result[452] = ciphertext[452] ^ output[4];
result[453] = ciphertext[453] ^ output[5];
result[454] = ciphertext[454] ^ output[6];
result[455] = ciphertext[455] ^ output[7];
result[456] = ciphertext[456] ^ output[8];
result[457] = ciphertext[457] ^ output[9];
result[458] = ciphertext[458] ^ output[10];
result[459] = ciphertext[459] ^ output[11];
result[460] = ciphertext[460] ^ output[12];
result[461] = ciphertext[461] ^ output[13];
result[462] = ciphertext[462] ^ output[14];
result[463] = ciphertext[463] ^ output[15];
result[464] = ciphertext[464] ^ output[16];
result[465] = ciphertext[465] ^ output[17];
result[466] = ciphertext[466] ^ output[18];
result[467] = ciphertext[467] ^ output[19];
result[468] = ciphertext[468] ^ output[20];
result[469] = ciphertext[469] ^ output[21];
result[470] = ciphertext[470] ^ output[22];
result[471] = ciphertext[471] ^ output[23];
result[472] = ciphertext[472] ^ output[24];
result[473] = ciphertext[473] ^ output[25];
result[474] = ciphertext[474] ^ output[26];
result[475] = ciphertext[475] ^ output[27];
result[476] = ciphertext[476] ^ output[28];
result[477] = ciphertext[477] ^ output[29];
result[478] = ciphertext[478] ^ output[30];
result[479] = ciphertext[479] ^ output[31];
result[480] = ciphertext[480] ^ output[32];
result[481] = ciphertext[481] ^ output[33];
result[482] = ciphertext[482] ^ output[34];
result[483] = ciphertext[483] ^ output[35];
result[484] = ciphertext[484] ^ output[36];
result[485] = ciphertext[485] ^ output[37];
result[486] = ciphertext[486] ^ output[38];
result[487] = ciphertext[487] ^ output[39];
result[488] = ciphertext[488] ^ output[40];
result[489] = ciphertext[489] ^ output[41];
result[490] = ciphertext[490] ^ output[42];
result[491] = ciphertext[491] ^ output[43];
result[492] = ciphertext[492] ^ output[44];
result[493] = ciphertext[493] ^ output[45];
result[494] = ciphertext[494] ^ output[46];
result[495] = ciphertext[495] ^ output[47];
result[496] = ciphertext[496] ^ output[48];
result[497] = ciphertext[497] ^ output[49];
result[498] = ciphertext[498] ^ output[50];
result[499] = ciphertext[499] ^ output[51];
result[500] = ciphertext[500] ^ output[52];
result[501] = ciphertext[501] ^ output[53];
result[502] = ciphertext[502] ^ output[54];
result[503] = ciphertext[503] ^ output[55];
result[504] = ciphertext[504] ^ output[56];
result[505] = ciphertext[505] ^ output[57];
result[506] = ciphertext[506] ^ output[58];
result[507] = ciphertext[507] ^ output[59];
result[508] = ciphertext[508] ^ output[60];
result[509] = ciphertext[509] ^ output[61];
result[510] = ciphertext[510] ^ output[62];
result[511] = ciphertext[511] ^ output[63];
x[0] = ctx.input[0]; 
x[1] = ctx.input[1]; 
x[2] = ctx.input[2]; 
x[3] = ctx.input[3]; 
x[4] = ctx.input[4]; 
x[5] = ctx.input[5]; 
x[6] = ctx.input[6]; 
x[7] = ctx.input[7]; 
x[8] = ctx.input[8]; 
x[9] = ctx.input[9]; 
x[10] = ctx.input[10]; 
x[11] = ctx.input[11]; 
x[12] = ctx.input[12]; 
x[13] = ctx.input[13]; 
x[14] = ctx.input[14]; 
x[15] = ctx.input[15]; 
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
x[0] = PLUS(x[0],ctx.input[0]); 
x[1] = PLUS(x[1],ctx.input[1]); 
x[2] = PLUS(x[2],ctx.input[2]); 
x[3] = PLUS(x[3],ctx.input[3]); 
x[4] = PLUS(x[4],ctx.input[4]); 
x[5] = PLUS(x[5],ctx.input[5]); 
x[6] = PLUS(x[6],ctx.input[6]); 
x[7] = PLUS(x[7],ctx.input[7]); 
x[8] = PLUS(x[8],ctx.input[8]); 
x[9] = PLUS(x[9],ctx.input[9]); 
x[10] = PLUS(x[10],ctx.input[10]); 
x[11] = PLUS(x[11],ctx.input[11]); 
x[12] = PLUS(x[12],ctx.input[12]); 
x[13] = PLUS(x[13],ctx.input[13]); 
x[14] = PLUS(x[14],ctx.input[14]); 
x[15] = PLUS(x[15],ctx.input[15]); 
U32TO8_LITTLE(output + 4 * 0,x[0]); 
U32TO8_LITTLE(output + 4 * 1,x[1]); 
U32TO8_LITTLE(output + 4 * 2,x[2]); 
U32TO8_LITTLE(output + 4 * 3,x[3]); 
U32TO8_LITTLE(output + 4 * 4,x[4]); 
U32TO8_LITTLE(output + 4 * 5,x[5]); 
U32TO8_LITTLE(output + 4 * 6,x[6]); 
U32TO8_LITTLE(output + 4 * 7,x[7]); 
U32TO8_LITTLE(output + 4 * 8,x[8]); 
U32TO8_LITTLE(output + 4 * 9,x[9]); 
U32TO8_LITTLE(output + 4 * 10,x[10]); 
U32TO8_LITTLE(output + 4 * 11,x[11]); 
U32TO8_LITTLE(output + 4 * 12,x[12]); 
U32TO8_LITTLE(output + 4 * 13,x[13]); 
U32TO8_LITTLE(output + 4 * 14,x[14]); 
U32TO8_LITTLE(output + 4 * 15,x[15]); 
ctx.input[12] = PLUSONE(ctx.input[12]); 
if (!ctx.input[12]) { 
ctx.input[13] = PLUSONE(ctx.input[13]); 
}
result[512] = ciphertext[512] ^ output[0];
result[513] = ciphertext[513] ^ output[1];
result[514] = ciphertext[514] ^ output[2];
result[515] = ciphertext[515] ^ output[3];
result[516] = ciphertext[516] ^ output[4];
result[517] = ciphertext[517] ^ output[5];
result[518] = ciphertext[518] ^ output[6];
result[519] = ciphertext[519] ^ output[7];
result[520] = ciphertext[520] ^ output[8];
result[521] = ciphertext[521] ^ output[9];
result[522] = ciphertext[522] ^ output[10];
result[523] = ciphertext[523] ^ output[11];
result[524] = ciphertext[524] ^ output[12];
result[525] = ciphertext[525] ^ output[13];
result[526] = ciphertext[526] ^ output[14];
result[527] = ciphertext[527] ^ output[15];
result[528] = ciphertext[528] ^ output[16];
result[529] = ciphertext[529] ^ output[17];
result[530] = ciphertext[530] ^ output[18];
result[531] = ciphertext[531] ^ output[19];
result[532] = ciphertext[532] ^ output[20];
result[533] = ciphertext[533] ^ output[21];
result[534] = ciphertext[534] ^ output[22];
result[535] = ciphertext[535] ^ output[23];
result[536] = ciphertext[536] ^ output[24];
result[537] = ciphertext[537] ^ output[25];
result[538] = ciphertext[538] ^ output[26];
result[539] = ciphertext[539] ^ output[27];
result[540] = ciphertext[540] ^ output[28];
result[541] = ciphertext[541] ^ output[29];
result[542] = ciphertext[542] ^ output[30];
result[543] = ciphertext[543] ^ output[31];
result[544] = ciphertext[544] ^ output[32];
result[545] = ciphertext[545] ^ output[33];
result[546] = ciphertext[546] ^ output[34];
result[547] = ciphertext[547] ^ output[35];
result[548] = ciphertext[548] ^ output[36];
result[549] = ciphertext[549] ^ output[37];
result[550] = ciphertext[550] ^ output[38];
result[551] = ciphertext[551] ^ output[39];
result[552] = ciphertext[552] ^ output[40];
result[553] = ciphertext[553] ^ output[41];
result[554] = ciphertext[554] ^ output[42];
result[555] = ciphertext[555] ^ output[43];
result[556] = ciphertext[556] ^ output[44];
result[557] = ciphertext[557] ^ output[45];
result[558] = ciphertext[558] ^ output[46];
result[559] = ciphertext[559] ^ output[47];
result[560] = ciphertext[560] ^ output[48];
result[561] = ciphertext[561] ^ output[49];
result[562] = ciphertext[562] ^ output[50];
result[563] = ciphertext[563] ^ output[51];
result[564] = ciphertext[564] ^ output[52];
result[565] = ciphertext[565] ^ output[53];
result[566] = ciphertext[566] ^ output[54];
result[567] = ciphertext[567] ^ output[55];
result[568] = ciphertext[568] ^ output[56];
result[569] = ciphertext[569] ^ output[57];
result[570] = ciphertext[570] ^ output[58];
result[571] = ciphertext[571] ^ output[59];
result[572] = ciphertext[572] ^ output[60];
result[573] = ciphertext[573] ^ output[61];
result[574] = ciphertext[574] ^ output[62];
result[575] = ciphertext[575] ^ output[63];
x[0] = ctx.input[0]; 
x[1] = ctx.input[1]; 
x[2] = ctx.input[2]; 
x[3] = ctx.input[3]; 
x[4] = ctx.input[4]; 
x[5] = ctx.input[5]; 
x[6] = ctx.input[6]; 
x[7] = ctx.input[7]; 
x[8] = ctx.input[8]; 
x[9] = ctx.input[9]; 
x[10] = ctx.input[10]; 
x[11] = ctx.input[11]; 
x[12] = ctx.input[12]; 
x[13] = ctx.input[13]; 
x[14] = ctx.input[14]; 
x[15] = ctx.input[15]; 
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
x[0] = PLUS(x[0],ctx.input[0]); 
x[1] = PLUS(x[1],ctx.input[1]); 
x[2] = PLUS(x[2],ctx.input[2]); 
x[3] = PLUS(x[3],ctx.input[3]); 
x[4] = PLUS(x[4],ctx.input[4]); 
x[5] = PLUS(x[5],ctx.input[5]); 
x[6] = PLUS(x[6],ctx.input[6]); 
x[7] = PLUS(x[7],ctx.input[7]); 
x[8] = PLUS(x[8],ctx.input[8]); 
x[9] = PLUS(x[9],ctx.input[9]); 
x[10] = PLUS(x[10],ctx.input[10]); 
x[11] = PLUS(x[11],ctx.input[11]); 
x[12] = PLUS(x[12],ctx.input[12]); 
x[13] = PLUS(x[13],ctx.input[13]); 
x[14] = PLUS(x[14],ctx.input[14]); 
x[15] = PLUS(x[15],ctx.input[15]); 
U32TO8_LITTLE(output + 4 * 0,x[0]); 
U32TO8_LITTLE(output + 4 * 1,x[1]); 
U32TO8_LITTLE(output + 4 * 2,x[2]); 
U32TO8_LITTLE(output + 4 * 3,x[3]); 
U32TO8_LITTLE(output + 4 * 4,x[4]); 
U32TO8_LITTLE(output + 4 * 5,x[5]); 
U32TO8_LITTLE(output + 4 * 6,x[6]); 
U32TO8_LITTLE(output + 4 * 7,x[7]); 
U32TO8_LITTLE(output + 4 * 8,x[8]); 
U32TO8_LITTLE(output + 4 * 9,x[9]); 
U32TO8_LITTLE(output + 4 * 10,x[10]); 
U32TO8_LITTLE(output + 4 * 11,x[11]); 
U32TO8_LITTLE(output + 4 * 12,x[12]); 
U32TO8_LITTLE(output + 4 * 13,x[13]); 
U32TO8_LITTLE(output + 4 * 14,x[14]); 
U32TO8_LITTLE(output + 4 * 15,x[15]); 
ctx.input[12] = PLUSONE(ctx.input[12]); 
if (!ctx.input[12]) { 
ctx.input[13] = PLUSONE(ctx.input[13]); 
}
result[576] = ciphertext[576] ^ output[0];
result[577] = ciphertext[577] ^ output[1];
result[578] = ciphertext[578] ^ output[2];
result[579] = ciphertext[579] ^ output[3];
result[580] = ciphertext[580] ^ output[4];
result[581] = ciphertext[581] ^ output[5];
result[582] = ciphertext[582] ^ output[6];
result[583] = ciphertext[583] ^ output[7];
result[584] = ciphertext[584] ^ output[8];
result[585] = ciphertext[585] ^ output[9];
result[586] = ciphertext[586] ^ output[10];
result[587] = ciphertext[587] ^ output[11];
result[588] = ciphertext[588] ^ output[12];
result[589] = ciphertext[589] ^ output[13];
result[590] = ciphertext[590] ^ output[14];
result[591] = ciphertext[591] ^ output[15];
result[592] = ciphertext[592] ^ output[16];
result[593] = ciphertext[593] ^ output[17];
result[594] = ciphertext[594] ^ output[18];
result[595] = ciphertext[595] ^ output[19];
result[596] = ciphertext[596] ^ output[20];
result[597] = ciphertext[597] ^ output[21];
result[598] = ciphertext[598] ^ output[22];
result[599] = ciphertext[599] ^ output[23];
result[600] = ciphertext[600] ^ output[24];
result[601] = ciphertext[601] ^ output[25];
result[602] = ciphertext[602] ^ output[26];
result[603] = ciphertext[603] ^ output[27];
result[604] = ciphertext[604] ^ output[28];
result[605] = ciphertext[605] ^ output[29];
result[606] = ciphertext[606] ^ output[30];
result[607] = ciphertext[607] ^ output[31];
result[608] = ciphertext[608] ^ output[32];
result[609] = ciphertext[609] ^ output[33];
result[610] = ciphertext[610] ^ output[34];
result[611] = ciphertext[611] ^ output[35];
result[612] = ciphertext[612] ^ output[36];
result[613] = ciphertext[613] ^ output[37];
result[614] = ciphertext[614] ^ output[38];
result[615] = ciphertext[615] ^ output[39];
result[616] = ciphertext[616] ^ output[40];
result[617] = ciphertext[617] ^ output[41];
result[618] = ciphertext[618] ^ output[42];
result[619] = ciphertext[619] ^ output[43];
result[620] = ciphertext[620] ^ output[44];
result[621] = ciphertext[621] ^ output[45];
result[622] = ciphertext[622] ^ output[46];
result[623] = ciphertext[623] ^ output[47];
result[624] = ciphertext[624] ^ output[48];
result[625] = ciphertext[625] ^ output[49];
result[626] = ciphertext[626] ^ output[50];
result[627] = ciphertext[627] ^ output[51];
result[628] = ciphertext[628] ^ output[52];
result[629] = ciphertext[629] ^ output[53];
result[630] = ciphertext[630] ^ output[54];
result[631] = ciphertext[631] ^ output[55];
result[632] = ciphertext[632] ^ output[56];
result[633] = ciphertext[633] ^ output[57];
result[634] = ciphertext[634] ^ output[58];
result[635] = ciphertext[635] ^ output[59];
result[636] = ciphertext[636] ^ output[60];
result[637] = ciphertext[637] ^ output[61];
result[638] = ciphertext[638] ^ output[62];
result[639] = ciphertext[639] ^ output[63];
x[0] = ctx.input[0]; 
x[1] = ctx.input[1]; 
x[2] = ctx.input[2]; 
x[3] = ctx.input[3]; 
x[4] = ctx.input[4]; 
x[5] = ctx.input[5]; 
x[6] = ctx.input[6]; 
x[7] = ctx.input[7]; 
x[8] = ctx.input[8]; 
x[9] = ctx.input[9]; 
x[10] = ctx.input[10]; 
x[11] = ctx.input[11]; 
x[12] = ctx.input[12]; 
x[13] = ctx.input[13]; 
x[14] = ctx.input[14]; 
x[15] = ctx.input[15]; 
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
x[0] = PLUS(x[0],ctx.input[0]); 
x[1] = PLUS(x[1],ctx.input[1]); 
x[2] = PLUS(x[2],ctx.input[2]); 
x[3] = PLUS(x[3],ctx.input[3]); 
x[4] = PLUS(x[4],ctx.input[4]); 
x[5] = PLUS(x[5],ctx.input[5]); 
x[6] = PLUS(x[6],ctx.input[6]); 
x[7] = PLUS(x[7],ctx.input[7]); 
x[8] = PLUS(x[8],ctx.input[8]); 
x[9] = PLUS(x[9],ctx.input[9]); 
x[10] = PLUS(x[10],ctx.input[10]); 
x[11] = PLUS(x[11],ctx.input[11]); 
x[12] = PLUS(x[12],ctx.input[12]); 
x[13] = PLUS(x[13],ctx.input[13]); 
x[14] = PLUS(x[14],ctx.input[14]); 
x[15] = PLUS(x[15],ctx.input[15]); 
U32TO8_LITTLE(output + 4 * 0,x[0]); 
U32TO8_LITTLE(output + 4 * 1,x[1]); 
U32TO8_LITTLE(output + 4 * 2,x[2]); 
U32TO8_LITTLE(output + 4 * 3,x[3]); 
U32TO8_LITTLE(output + 4 * 4,x[4]); 
U32TO8_LITTLE(output + 4 * 5,x[5]); 
U32TO8_LITTLE(output + 4 * 6,x[6]); 
U32TO8_LITTLE(output + 4 * 7,x[7]); 
U32TO8_LITTLE(output + 4 * 8,x[8]); 
U32TO8_LITTLE(output + 4 * 9,x[9]); 
U32TO8_LITTLE(output + 4 * 10,x[10]); 
U32TO8_LITTLE(output + 4 * 11,x[11]); 
U32TO8_LITTLE(output + 4 * 12,x[12]); 
U32TO8_LITTLE(output + 4 * 13,x[13]); 
U32TO8_LITTLE(output + 4 * 14,x[14]); 
U32TO8_LITTLE(output + 4 * 15,x[15]); 
ctx.input[12] = PLUSONE(ctx.input[12]); 
if (!ctx.input[12]) { 
ctx.input[13] = PLUSONE(ctx.input[13]); 
}
result[640] = ciphertext[640] ^ output[0];
result[641] = ciphertext[641] ^ output[1];
result[642] = ciphertext[642] ^ output[2];
result[643] = ciphertext[643] ^ output[3];
result[644] = ciphertext[644] ^ output[4];
result[645] = ciphertext[645] ^ output[5];
result[646] = ciphertext[646] ^ output[6];
result[647] = ciphertext[647] ^ output[7];
result[648] = ciphertext[648] ^ output[8];
result[649] = ciphertext[649] ^ output[9];
result[650] = ciphertext[650] ^ output[10];
result[651] = ciphertext[651] ^ output[11];
result[652] = ciphertext[652] ^ output[12];
result[653] = ciphertext[653] ^ output[13];
result[654] = ciphertext[654] ^ output[14];
result[655] = ciphertext[655] ^ output[15];
result[656] = ciphertext[656] ^ output[16];
result[657] = ciphertext[657] ^ output[17];
result[658] = ciphertext[658] ^ output[18];
result[659] = ciphertext[659] ^ output[19];
result[660] = ciphertext[660] ^ output[20];
result[661] = ciphertext[661] ^ output[21];
result[662] = ciphertext[662] ^ output[22];
result[663] = ciphertext[663] ^ output[23];
result[664] = ciphertext[664] ^ output[24];
result[665] = ciphertext[665] ^ output[25];
result[666] = ciphertext[666] ^ output[26];
result[667] = ciphertext[667] ^ output[27];
result[668] = ciphertext[668] ^ output[28];
result[669] = ciphertext[669] ^ output[29];
result[670] = ciphertext[670] ^ output[30];
result[671] = ciphertext[671] ^ output[31];
result[672] = ciphertext[672] ^ output[32];
result[673] = ciphertext[673] ^ output[33];
result[674] = ciphertext[674] ^ output[34];
result[675] = ciphertext[675] ^ output[35];
result[676] = ciphertext[676] ^ output[36];
result[677] = ciphertext[677] ^ output[37];
result[678] = ciphertext[678] ^ output[38];
result[679] = ciphertext[679] ^ output[39];
result[680] = ciphertext[680] ^ output[40];
result[681] = ciphertext[681] ^ output[41];
result[682] = ciphertext[682] ^ output[42];
result[683] = ciphertext[683] ^ output[43];
result[684] = ciphertext[684] ^ output[44];
result[685] = ciphertext[685] ^ output[45];
result[686] = ciphertext[686] ^ output[46];
result[687] = ciphertext[687] ^ output[47];
result[688] = ciphertext[688] ^ output[48];
result[689] = ciphertext[689] ^ output[49];
result[690] = ciphertext[690] ^ output[50];
result[691] = ciphertext[691] ^ output[51];
result[692] = ciphertext[692] ^ output[52];
result[693] = ciphertext[693] ^ output[53];
result[694] = ciphertext[694] ^ output[54];
result[695] = ciphertext[695] ^ output[55];
result[696] = ciphertext[696] ^ output[56];
result[697] = ciphertext[697] ^ output[57];
result[698] = ciphertext[698] ^ output[58];
result[699] = ciphertext[699] ^ output[59];
result[700] = ciphertext[700] ^ output[60];
result[701] = ciphertext[701] ^ output[61];
result[702] = ciphertext[702] ^ output[62];
result[703] = ciphertext[703] ^ output[63];
x[0] = ctx.input[0]; 
x[1] = ctx.input[1]; 
x[2] = ctx.input[2]; 
x[3] = ctx.input[3]; 
x[4] = ctx.input[4]; 
x[5] = ctx.input[5]; 
x[6] = ctx.input[6]; 
x[7] = ctx.input[7]; 
x[8] = ctx.input[8]; 
x[9] = ctx.input[9]; 
x[10] = ctx.input[10]; 
x[11] = ctx.input[11]; 
x[12] = ctx.input[12]; 
x[13] = ctx.input[13]; 
x[14] = ctx.input[14]; 
x[15] = ctx.input[15]; 
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
x[0] = PLUS(x[0],ctx.input[0]); 
x[1] = PLUS(x[1],ctx.input[1]); 
x[2] = PLUS(x[2],ctx.input[2]); 
x[3] = PLUS(x[3],ctx.input[3]); 
x[4] = PLUS(x[4],ctx.input[4]); 
x[5] = PLUS(x[5],ctx.input[5]); 
x[6] = PLUS(x[6],ctx.input[6]); 
x[7] = PLUS(x[7],ctx.input[7]); 
x[8] = PLUS(x[8],ctx.input[8]); 
x[9] = PLUS(x[9],ctx.input[9]); 
x[10] = PLUS(x[10],ctx.input[10]); 
x[11] = PLUS(x[11],ctx.input[11]); 
x[12] = PLUS(x[12],ctx.input[12]); 
x[13] = PLUS(x[13],ctx.input[13]); 
x[14] = PLUS(x[14],ctx.input[14]); 
x[15] = PLUS(x[15],ctx.input[15]); 
U32TO8_LITTLE(output + 4 * 0,x[0]); 
U32TO8_LITTLE(output + 4 * 1,x[1]); 
U32TO8_LITTLE(output + 4 * 2,x[2]); 
U32TO8_LITTLE(output + 4 * 3,x[3]); 
U32TO8_LITTLE(output + 4 * 4,x[4]); 
U32TO8_LITTLE(output + 4 * 5,x[5]); 
U32TO8_LITTLE(output + 4 * 6,x[6]); 
U32TO8_LITTLE(output + 4 * 7,x[7]); 
U32TO8_LITTLE(output + 4 * 8,x[8]); 
U32TO8_LITTLE(output + 4 * 9,x[9]); 
U32TO8_LITTLE(output + 4 * 10,x[10]); 
U32TO8_LITTLE(output + 4 * 11,x[11]); 
U32TO8_LITTLE(output + 4 * 12,x[12]); 
U32TO8_LITTLE(output + 4 * 13,x[13]); 
U32TO8_LITTLE(output + 4 * 14,x[14]); 
U32TO8_LITTLE(output + 4 * 15,x[15]); 
ctx.input[12] = PLUSONE(ctx.input[12]); 
if (!ctx.input[12]) { 
ctx.input[13] = PLUSONE(ctx.input[13]); 
}
result[704] = ciphertext[704] ^ output[0];
result[705] = ciphertext[705] ^ output[1];
result[706] = ciphertext[706] ^ output[2];
result[707] = ciphertext[707] ^ output[3];
result[708] = ciphertext[708] ^ output[4];
result[709] = ciphertext[709] ^ output[5];
result[710] = ciphertext[710] ^ output[6];
result[711] = ciphertext[711] ^ output[7];
result[712] = ciphertext[712] ^ output[8];
result[713] = ciphertext[713] ^ output[9];
result[714] = ciphertext[714] ^ output[10];
result[715] = ciphertext[715] ^ output[11];
result[716] = ciphertext[716] ^ output[12];
result[717] = ciphertext[717] ^ output[13];
result[718] = ciphertext[718] ^ output[14];
result[719] = ciphertext[719] ^ output[15];
result[720] = ciphertext[720] ^ output[16];
result[721] = ciphertext[721] ^ output[17];
result[722] = ciphertext[722] ^ output[18];
result[723] = ciphertext[723] ^ output[19];
result[724] = ciphertext[724] ^ output[20];
result[725] = ciphertext[725] ^ output[21];
result[726] = ciphertext[726] ^ output[22];
result[727] = ciphertext[727] ^ output[23];
result[728] = ciphertext[728] ^ output[24];
result[729] = ciphertext[729] ^ output[25];
result[730] = ciphertext[730] ^ output[26];
result[731] = ciphertext[731] ^ output[27];
result[732] = ciphertext[732] ^ output[28];
result[733] = ciphertext[733] ^ output[29];
result[734] = ciphertext[734] ^ output[30];
result[735] = ciphertext[735] ^ output[31];
result[736] = ciphertext[736] ^ output[32];
result[737] = ciphertext[737] ^ output[33];
result[738] = ciphertext[738] ^ output[34];
result[739] = ciphertext[739] ^ output[35];
result[740] = ciphertext[740] ^ output[36];
result[741] = ciphertext[741] ^ output[37];
result[742] = ciphertext[742] ^ output[38];
result[743] = ciphertext[743] ^ output[39];
result[744] = ciphertext[744] ^ output[40];
result[745] = ciphertext[745] ^ output[41];
result[746] = ciphertext[746] ^ output[42];
result[747] = ciphertext[747] ^ output[43];
result[748] = ciphertext[748] ^ output[44];
result[749] = ciphertext[749] ^ output[45];
result[750] = ciphertext[750] ^ output[46];
result[751] = ciphertext[751] ^ output[47];
result[752] = ciphertext[752] ^ output[48];
result[753] = ciphertext[753] ^ output[49];
result[754] = ciphertext[754] ^ output[50];
result[755] = ciphertext[755] ^ output[51];
result[756] = ciphertext[756] ^ output[52];
result[757] = ciphertext[757] ^ output[53];
result[758] = ciphertext[758] ^ output[54];
result[759] = ciphertext[759] ^ output[55];
result[760] = ciphertext[760] ^ output[56];
result[761] = ciphertext[761] ^ output[57];
result[762] = ciphertext[762] ^ output[58];
result[763] = ciphertext[763] ^ output[59];
result[764] = ciphertext[764] ^ output[60];
result[765] = ciphertext[765] ^ output[61];
result[766] = ciphertext[766] ^ output[62];
result[767] = ciphertext[767] ^ output[63];
x[0] = ctx.input[0]; 
x[1] = ctx.input[1]; 
x[2] = ctx.input[2]; 
x[3] = ctx.input[3]; 
x[4] = ctx.input[4]; 
x[5] = ctx.input[5]; 
x[6] = ctx.input[6]; 
x[7] = ctx.input[7]; 
x[8] = ctx.input[8]; 
x[9] = ctx.input[9]; 
x[10] = ctx.input[10]; 
x[11] = ctx.input[11]; 
x[12] = ctx.input[12]; 
x[13] = ctx.input[13]; 
x[14] = ctx.input[14]; 
x[15] = ctx.input[15]; 
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
x[0] = PLUS(x[0],ctx.input[0]); 
x[1] = PLUS(x[1],ctx.input[1]); 
x[2] = PLUS(x[2],ctx.input[2]); 
x[3] = PLUS(x[3],ctx.input[3]); 
x[4] = PLUS(x[4],ctx.input[4]); 
x[5] = PLUS(x[5],ctx.input[5]); 
x[6] = PLUS(x[6],ctx.input[6]); 
x[7] = PLUS(x[7],ctx.input[7]); 
x[8] = PLUS(x[8],ctx.input[8]); 
x[9] = PLUS(x[9],ctx.input[9]); 
x[10] = PLUS(x[10],ctx.input[10]); 
x[11] = PLUS(x[11],ctx.input[11]); 
x[12] = PLUS(x[12],ctx.input[12]); 
x[13] = PLUS(x[13],ctx.input[13]); 
x[14] = PLUS(x[14],ctx.input[14]); 
x[15] = PLUS(x[15],ctx.input[15]); 
U32TO8_LITTLE(output + 4 * 0,x[0]); 
U32TO8_LITTLE(output + 4 * 1,x[1]); 
U32TO8_LITTLE(output + 4 * 2,x[2]); 
U32TO8_LITTLE(output + 4 * 3,x[3]); 
U32TO8_LITTLE(output + 4 * 4,x[4]); 
U32TO8_LITTLE(output + 4 * 5,x[5]); 
U32TO8_LITTLE(output + 4 * 6,x[6]); 
U32TO8_LITTLE(output + 4 * 7,x[7]); 
U32TO8_LITTLE(output + 4 * 8,x[8]); 
U32TO8_LITTLE(output + 4 * 9,x[9]); 
U32TO8_LITTLE(output + 4 * 10,x[10]); 
U32TO8_LITTLE(output + 4 * 11,x[11]); 
U32TO8_LITTLE(output + 4 * 12,x[12]); 
U32TO8_LITTLE(output + 4 * 13,x[13]); 
U32TO8_LITTLE(output + 4 * 14,x[14]); 
U32TO8_LITTLE(output + 4 * 15,x[15]); 
ctx.input[12] = PLUSONE(ctx.input[12]); 
if (!ctx.input[12]) { 
ctx.input[13] = PLUSONE(ctx.input[13]); 
}
result[768] = ciphertext[768] ^ output[0];
result[769] = ciphertext[769] ^ output[1];
result[770] = ciphertext[770] ^ output[2];
result[771] = ciphertext[771] ^ output[3];
result[772] = ciphertext[772] ^ output[4];
result[773] = ciphertext[773] ^ output[5];
result[774] = ciphertext[774] ^ output[6];
result[775] = ciphertext[775] ^ output[7];
result[776] = ciphertext[776] ^ output[8];
result[777] = ciphertext[777] ^ output[9];
result[778] = ciphertext[778] ^ output[10];
result[779] = ciphertext[779] ^ output[11];
result[780] = ciphertext[780] ^ output[12];
result[781] = ciphertext[781] ^ output[13];
result[782] = ciphertext[782] ^ output[14];
result[783] = ciphertext[783] ^ output[15];
result[784] = ciphertext[784] ^ output[16];
result[785] = ciphertext[785] ^ output[17];
result[786] = ciphertext[786] ^ output[18];
result[787] = ciphertext[787] ^ output[19];
result[788] = ciphertext[788] ^ output[20];
result[789] = ciphertext[789] ^ output[21];
result[790] = ciphertext[790] ^ output[22];
result[791] = ciphertext[791] ^ output[23];
result[792] = ciphertext[792] ^ output[24];
result[793] = ciphertext[793] ^ output[25];
result[794] = ciphertext[794] ^ output[26];
result[795] = ciphertext[795] ^ output[27];
result[796] = ciphertext[796] ^ output[28];
result[797] = ciphertext[797] ^ output[29];
result[798] = ciphertext[798] ^ output[30];
result[799] = ciphertext[799] ^ output[31];
result[800] = ciphertext[800] ^ output[32];
result[801] = ciphertext[801] ^ output[33];
result[802] = ciphertext[802] ^ output[34];
result[803] = ciphertext[803] ^ output[35];
result[804] = ciphertext[804] ^ output[36];
result[805] = ciphertext[805] ^ output[37];
result[806] = ciphertext[806] ^ output[38];
result[807] = ciphertext[807] ^ output[39];
result[808] = ciphertext[808] ^ output[40];
result[809] = ciphertext[809] ^ output[41];
result[810] = ciphertext[810] ^ output[42];
result[811] = ciphertext[811] ^ output[43];
result[812] = ciphertext[812] ^ output[44];
result[813] = ciphertext[813] ^ output[45];
result[814] = ciphertext[814] ^ output[46];
result[815] = ciphertext[815] ^ output[47];
result[816] = ciphertext[816] ^ output[48];
result[817] = ciphertext[817] ^ output[49];
result[818] = ciphertext[818] ^ output[50];
result[819] = ciphertext[819] ^ output[51];
result[820] = ciphertext[820] ^ output[52];
result[821] = ciphertext[821] ^ output[53];
result[822] = ciphertext[822] ^ output[54];
result[823] = ciphertext[823] ^ output[55];
result[824] = ciphertext[824] ^ output[56];
result[825] = ciphertext[825] ^ output[57];
result[826] = ciphertext[826] ^ output[58];
result[827] = ciphertext[827] ^ output[59];
result[828] = ciphertext[828] ^ output[60];
result[829] = ciphertext[829] ^ output[61];
result[830] = ciphertext[830] ^ output[62];
result[831] = ciphertext[831] ^ output[63];
x[0] = ctx.input[0]; 
x[1] = ctx.input[1]; 
x[2] = ctx.input[2]; 
x[3] = ctx.input[3]; 
x[4] = ctx.input[4]; 
x[5] = ctx.input[5]; 
x[6] = ctx.input[6]; 
x[7] = ctx.input[7]; 
x[8] = ctx.input[8]; 
x[9] = ctx.input[9]; 
x[10] = ctx.input[10]; 
x[11] = ctx.input[11]; 
x[12] = ctx.input[12]; 
x[13] = ctx.input[13]; 
x[14] = ctx.input[14]; 
x[15] = ctx.input[15]; 
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
x[0] = PLUS(x[0],ctx.input[0]); 
x[1] = PLUS(x[1],ctx.input[1]); 
x[2] = PLUS(x[2],ctx.input[2]); 
x[3] = PLUS(x[3],ctx.input[3]); 
x[4] = PLUS(x[4],ctx.input[4]); 
x[5] = PLUS(x[5],ctx.input[5]); 
x[6] = PLUS(x[6],ctx.input[6]); 
x[7] = PLUS(x[7],ctx.input[7]); 
x[8] = PLUS(x[8],ctx.input[8]); 
x[9] = PLUS(x[9],ctx.input[9]); 
x[10] = PLUS(x[10],ctx.input[10]); 
x[11] = PLUS(x[11],ctx.input[11]); 
x[12] = PLUS(x[12],ctx.input[12]); 
x[13] = PLUS(x[13],ctx.input[13]); 
x[14] = PLUS(x[14],ctx.input[14]); 
x[15] = PLUS(x[15],ctx.input[15]); 
U32TO8_LITTLE(output + 4 * 0,x[0]); 
U32TO8_LITTLE(output + 4 * 1,x[1]); 
U32TO8_LITTLE(output + 4 * 2,x[2]); 
U32TO8_LITTLE(output + 4 * 3,x[3]); 
U32TO8_LITTLE(output + 4 * 4,x[4]); 
U32TO8_LITTLE(output + 4 * 5,x[5]); 
U32TO8_LITTLE(output + 4 * 6,x[6]); 
U32TO8_LITTLE(output + 4 * 7,x[7]); 
U32TO8_LITTLE(output + 4 * 8,x[8]); 
U32TO8_LITTLE(output + 4 * 9,x[9]); 
U32TO8_LITTLE(output + 4 * 10,x[10]); 
U32TO8_LITTLE(output + 4 * 11,x[11]); 
U32TO8_LITTLE(output + 4 * 12,x[12]); 
U32TO8_LITTLE(output + 4 * 13,x[13]); 
U32TO8_LITTLE(output + 4 * 14,x[14]); 
U32TO8_LITTLE(output + 4 * 15,x[15]); 
ctx.input[12] = PLUSONE(ctx.input[12]); 
if (!ctx.input[12]) { 
ctx.input[13] = PLUSONE(ctx.input[13]); 
}
result[832] = ciphertext[832] ^ output[0];
result[833] = ciphertext[833] ^ output[1];
result[834] = ciphertext[834] ^ output[2];
result[835] = ciphertext[835] ^ output[3];
result[836] = ciphertext[836] ^ output[4];
result[837] = ciphertext[837] ^ output[5];
result[838] = ciphertext[838] ^ output[6];
result[839] = ciphertext[839] ^ output[7];
result[840] = ciphertext[840] ^ output[8];
result[841] = ciphertext[841] ^ output[9];
result[842] = ciphertext[842] ^ output[10];
result[843] = ciphertext[843] ^ output[11];
result[844] = ciphertext[844] ^ output[12];
result[845] = ciphertext[845] ^ output[13];
result[846] = ciphertext[846] ^ output[14];
result[847] = ciphertext[847] ^ output[15];
result[848] = ciphertext[848] ^ output[16];
result[849] = ciphertext[849] ^ output[17];
result[850] = ciphertext[850] ^ output[18];
result[851] = ciphertext[851] ^ output[19];
result[852] = ciphertext[852] ^ output[20];
result[853] = ciphertext[853] ^ output[21];
result[854] = ciphertext[854] ^ output[22];
result[855] = ciphertext[855] ^ output[23];
result[856] = ciphertext[856] ^ output[24];
result[857] = ciphertext[857] ^ output[25];
result[858] = ciphertext[858] ^ output[26];
result[859] = ciphertext[859] ^ output[27];
result[860] = ciphertext[860] ^ output[28];
result[861] = ciphertext[861] ^ output[29];
result[862] = ciphertext[862] ^ output[30];
result[863] = ciphertext[863] ^ output[31];
result[864] = ciphertext[864] ^ output[32];
result[865] = ciphertext[865] ^ output[33];
result[866] = ciphertext[866] ^ output[34];
result[867] = ciphertext[867] ^ output[35];
result[868] = ciphertext[868] ^ output[36];
result[869] = ciphertext[869] ^ output[37];
result[870] = ciphertext[870] ^ output[38];
result[871] = ciphertext[871] ^ output[39];
result[872] = ciphertext[872] ^ output[40];
result[873] = ciphertext[873] ^ output[41];
result[874] = ciphertext[874] ^ output[42];
result[875] = ciphertext[875] ^ output[43];
result[876] = ciphertext[876] ^ output[44];
result[877] = ciphertext[877] ^ output[45];
result[878] = ciphertext[878] ^ output[46];
result[879] = ciphertext[879] ^ output[47];
result[880] = ciphertext[880] ^ output[48];
result[881] = ciphertext[881] ^ output[49];
result[882] = ciphertext[882] ^ output[50];
result[883] = ciphertext[883] ^ output[51];
result[884] = ciphertext[884] ^ output[52];
result[885] = ciphertext[885] ^ output[53];
result[886] = ciphertext[886] ^ output[54];
result[887] = ciphertext[887] ^ output[55];
result[888] = ciphertext[888] ^ output[56];
result[889] = ciphertext[889] ^ output[57];
result[890] = ciphertext[890] ^ output[58];
result[891] = ciphertext[891] ^ output[59];
result[892] = ciphertext[892] ^ output[60];
result[893] = ciphertext[893] ^ output[61];
result[894] = ciphertext[894] ^ output[62];
result[895] = ciphertext[895] ^ output[63];
x[0] = ctx.input[0]; 
x[1] = ctx.input[1]; 
x[2] = ctx.input[2]; 
x[3] = ctx.input[3]; 
x[4] = ctx.input[4]; 
x[5] = ctx.input[5]; 
x[6] = ctx.input[6]; 
x[7] = ctx.input[7]; 
x[8] = ctx.input[8]; 
x[9] = ctx.input[9]; 
x[10] = ctx.input[10]; 
x[11] = ctx.input[11]; 
x[12] = ctx.input[12]; 
x[13] = ctx.input[13]; 
x[14] = ctx.input[14]; 
x[15] = ctx.input[15]; 
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
x[0] = PLUS(x[0],ctx.input[0]); 
x[1] = PLUS(x[1],ctx.input[1]); 
x[2] = PLUS(x[2],ctx.input[2]); 
x[3] = PLUS(x[3],ctx.input[3]); 
x[4] = PLUS(x[4],ctx.input[4]); 
x[5] = PLUS(x[5],ctx.input[5]); 
x[6] = PLUS(x[6],ctx.input[6]); 
x[7] = PLUS(x[7],ctx.input[7]); 
x[8] = PLUS(x[8],ctx.input[8]); 
x[9] = PLUS(x[9],ctx.input[9]); 
x[10] = PLUS(x[10],ctx.input[10]); 
x[11] = PLUS(x[11],ctx.input[11]); 
x[12] = PLUS(x[12],ctx.input[12]); 
x[13] = PLUS(x[13],ctx.input[13]); 
x[14] = PLUS(x[14],ctx.input[14]); 
x[15] = PLUS(x[15],ctx.input[15]); 
U32TO8_LITTLE(output + 4 * 0,x[0]); 
U32TO8_LITTLE(output + 4 * 1,x[1]); 
U32TO8_LITTLE(output + 4 * 2,x[2]); 
U32TO8_LITTLE(output + 4 * 3,x[3]); 
U32TO8_LITTLE(output + 4 * 4,x[4]); 
U32TO8_LITTLE(output + 4 * 5,x[5]); 
U32TO8_LITTLE(output + 4 * 6,x[6]); 
U32TO8_LITTLE(output + 4 * 7,x[7]); 
U32TO8_LITTLE(output + 4 * 8,x[8]); 
U32TO8_LITTLE(output + 4 * 9,x[9]); 
U32TO8_LITTLE(output + 4 * 10,x[10]); 
U32TO8_LITTLE(output + 4 * 11,x[11]); 
U32TO8_LITTLE(output + 4 * 12,x[12]); 
U32TO8_LITTLE(output + 4 * 13,x[13]); 
U32TO8_LITTLE(output + 4 * 14,x[14]); 
U32TO8_LITTLE(output + 4 * 15,x[15]); 
ctx.input[12] = PLUSONE(ctx.input[12]); 
if (!ctx.input[12]) { 
ctx.input[13] = PLUSONE(ctx.input[13]); 
}
result[896] = ciphertext[896] ^ output[0];
result[897] = ciphertext[897] ^ output[1];
result[898] = ciphertext[898] ^ output[2];
result[899] = ciphertext[899] ^ output[3];
result[900] = ciphertext[900] ^ output[4];
result[901] = ciphertext[901] ^ output[5];
result[902] = ciphertext[902] ^ output[6];
result[903] = ciphertext[903] ^ output[7];
result[904] = ciphertext[904] ^ output[8];
result[905] = ciphertext[905] ^ output[9];
result[906] = ciphertext[906] ^ output[10];
result[907] = ciphertext[907] ^ output[11];
result[908] = ciphertext[908] ^ output[12];
result[909] = ciphertext[909] ^ output[13];
result[910] = ciphertext[910] ^ output[14];
result[911] = ciphertext[911] ^ output[15];
result[912] = ciphertext[912] ^ output[16];
result[913] = ciphertext[913] ^ output[17];
result[914] = ciphertext[914] ^ output[18];
result[915] = ciphertext[915] ^ output[19];
result[916] = ciphertext[916] ^ output[20];
result[917] = ciphertext[917] ^ output[21];
result[918] = ciphertext[918] ^ output[22];
result[919] = ciphertext[919] ^ output[23];
result[920] = ciphertext[920] ^ output[24];
result[921] = ciphertext[921] ^ output[25];
result[922] = ciphertext[922] ^ output[26];
result[923] = ciphertext[923] ^ output[27];
result[924] = ciphertext[924] ^ output[28];
result[925] = ciphertext[925] ^ output[29];
result[926] = ciphertext[926] ^ output[30];
result[927] = ciphertext[927] ^ output[31];
result[928] = ciphertext[928] ^ output[32];
result[929] = ciphertext[929] ^ output[33];
result[930] = ciphertext[930] ^ output[34];
result[931] = ciphertext[931] ^ output[35];
result[932] = ciphertext[932] ^ output[36];
result[933] = ciphertext[933] ^ output[37];
result[934] = ciphertext[934] ^ output[38];
result[935] = ciphertext[935] ^ output[39];
result[936] = ciphertext[936] ^ output[40];
result[937] = ciphertext[937] ^ output[41];
result[938] = ciphertext[938] ^ output[42];
result[939] = ciphertext[939] ^ output[43];
result[940] = ciphertext[940] ^ output[44];
result[941] = ciphertext[941] ^ output[45];
result[942] = ciphertext[942] ^ output[46];
result[943] = ciphertext[943] ^ output[47];
result[944] = ciphertext[944] ^ output[48];
result[945] = ciphertext[945] ^ output[49];
result[946] = ciphertext[946] ^ output[50];
result[947] = ciphertext[947] ^ output[51];
result[948] = ciphertext[948] ^ output[52];
result[949] = ciphertext[949] ^ output[53];
result[950] = ciphertext[950] ^ output[54];
result[951] = ciphertext[951] ^ output[55];
result[952] = ciphertext[952] ^ output[56];
result[953] = ciphertext[953] ^ output[57];
result[954] = ciphertext[954] ^ output[58];
result[955] = ciphertext[955] ^ output[59];
result[956] = ciphertext[956] ^ output[60];
result[957] = ciphertext[957] ^ output[61];
result[958] = ciphertext[958] ^ output[62];
result[959] = ciphertext[959] ^ output[63];
x[0] = ctx.input[0]; 
x[1] = ctx.input[1]; 
x[2] = ctx.input[2]; 
x[3] = ctx.input[3]; 
x[4] = ctx.input[4]; 
x[5] = ctx.input[5]; 
x[6] = ctx.input[6]; 
x[7] = ctx.input[7]; 
x[8] = ctx.input[8]; 
x[9] = ctx.input[9]; 
x[10] = ctx.input[10]; 
x[11] = ctx.input[11]; 
x[12] = ctx.input[12]; 
x[13] = ctx.input[13]; 
x[14] = ctx.input[14]; 
x[15] = ctx.input[15]; 
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
QUARTERROUND( 0, 4, 8,12);
QUARTERROUND( 1, 5, 9,13);
QUARTERROUND( 2, 6,10,14);
QUARTERROUND( 3, 7,11,15);
QUARTERROUND( 0, 5,10,15);
QUARTERROUND( 1, 6,11,12);
QUARTERROUND( 2, 7, 8,13);
QUARTERROUND( 3, 4, 9,14);
x[0] = PLUS(x[0],ctx.input[0]); 
x[1] = PLUS(x[1],ctx.input[1]); 
x[2] = PLUS(x[2],ctx.input[2]); 
x[3] = PLUS(x[3],ctx.input[3]); 
x[4] = PLUS(x[4],ctx.input[4]); 
x[5] = PLUS(x[5],ctx.input[5]); 
x[6] = PLUS(x[6],ctx.input[6]); 
x[7] = PLUS(x[7],ctx.input[7]); 
x[8] = PLUS(x[8],ctx.input[8]); 
x[9] = PLUS(x[9],ctx.input[9]); 
x[10] = PLUS(x[10],ctx.input[10]); 
x[11] = PLUS(x[11],ctx.input[11]); 
x[12] = PLUS(x[12],ctx.input[12]); 
x[13] = PLUS(x[13],ctx.input[13]); 
x[14] = PLUS(x[14],ctx.input[14]); 
x[15] = PLUS(x[15],ctx.input[15]); 
U32TO8_LITTLE(output + 4 * 0,x[0]); 
U32TO8_LITTLE(output + 4 * 1,x[1]); 
U32TO8_LITTLE(output + 4 * 2,x[2]); 
U32TO8_LITTLE(output + 4 * 3,x[3]); 
U32TO8_LITTLE(output + 4 * 4,x[4]); 
U32TO8_LITTLE(output + 4 * 5,x[5]); 
U32TO8_LITTLE(output + 4 * 6,x[6]); 
U32TO8_LITTLE(output + 4 * 7,x[7]); 
U32TO8_LITTLE(output + 4 * 8,x[8]); 
U32TO8_LITTLE(output + 4 * 9,x[9]); 
U32TO8_LITTLE(output + 4 * 10,x[10]); 
U32TO8_LITTLE(output + 4 * 11,x[11]); 
U32TO8_LITTLE(output + 4 * 12,x[12]); 
U32TO8_LITTLE(output + 4 * 13,x[13]); 
U32TO8_LITTLE(output + 4 * 14,x[14]); 
U32TO8_LITTLE(output + 4 * 15,x[15]); 
ctx.input[12] = PLUSONE(ctx.input[12]); 
if (!ctx.input[12]) { 
ctx.input[13] = PLUSONE(ctx.input[13]); 
}
result[960] = ciphertext[960] ^ output[0];
result[961] = ciphertext[961] ^ output[1];
result[962] = ciphertext[962] ^ output[2];
result[963] = ciphertext[963] ^ output[3];
result[964] = ciphertext[964] ^ output[4];
result[965] = ciphertext[965] ^ output[5];
result[966] = ciphertext[966] ^ output[6];
result[967] = ciphertext[967] ^ output[7];
result[968] = ciphertext[968] ^ output[8];
result[969] = ciphertext[969] ^ output[9];
result[970] = ciphertext[970] ^ output[10];
result[971] = ciphertext[971] ^ output[11];
result[972] = ciphertext[972] ^ output[12];
result[973] = ciphertext[973] ^ output[13];
result[974] = ciphertext[974] ^ output[14];
result[975] = ciphertext[975] ^ output[15];
result[976] = ciphertext[976] ^ output[16];
result[977] = ciphertext[977] ^ output[17];
result[978] = ciphertext[978] ^ output[18];
result[979] = ciphertext[979] ^ output[19];
result[980] = ciphertext[980] ^ output[20];
result[981] = ciphertext[981] ^ output[21];
result[982] = ciphertext[982] ^ output[22];
result[983] = ciphertext[983] ^ output[23];
result[984] = ciphertext[984] ^ output[24];
result[985] = ciphertext[985] ^ output[25];
result[986] = ciphertext[986] ^ output[26];
result[987] = ciphertext[987] ^ output[27];
result[988] = ciphertext[988] ^ output[28];
result[989] = ciphertext[989] ^ output[29];
result[990] = ciphertext[990] ^ output[30];
result[991] = ciphertext[991] ^ output[31];
result[992] = ciphertext[992] ^ output[32];
result[993] = ciphertext[993] ^ output[33];
result[994] = ciphertext[994] ^ output[34];
result[995] = ciphertext[995] ^ output[35];
result[996] = ciphertext[996] ^ output[36];
result[997] = ciphertext[997] ^ output[37];
result[998] = ciphertext[998] ^ output[38];
result[999] = ciphertext[999] ^ output[39];
result[1000] = ciphertext[1000] ^ output[40];
result[1001] = ciphertext[1001] ^ output[41];
result[1002] = ciphertext[1002] ^ output[42];
result[1003] = ciphertext[1003] ^ output[43];
result[1004] = ciphertext[1004] ^ output[44];
result[1005] = ciphertext[1005] ^ output[45];
result[1006] = ciphertext[1006] ^ output[46];
result[1007] = ciphertext[1007] ^ output[47];
result[1008] = ciphertext[1008] ^ output[48];
result[1009] = ciphertext[1009] ^ output[49];
result[1010] = ciphertext[1010] ^ output[50];
result[1011] = ciphertext[1011] ^ output[51];
result[1012] = ciphertext[1012] ^ output[52];
result[1013] = ciphertext[1013] ^ output[53];
result[1014] = ciphertext[1014] ^ output[54];
result[1015] = ciphertext[1015] ^ output[55];
result[1016] = ciphertext[1016] ^ output[56];
result[1017] = ciphertext[1017] ^ output[57];
result[1018] = ciphertext[1018] ^ output[58];
result[1019] = ciphertext[1019] ^ output[59];
result[1020] = ciphertext[1020] ^ output[60];
result[1021] = ciphertext[1021] ^ output[61];
result[1022] = ciphertext[1022] ^ output[62];
result[1023] = ciphertext[1023] ^ output[63];
